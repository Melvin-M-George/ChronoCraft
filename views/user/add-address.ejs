<%- include("../../views/partials/user/header") %>
    <div class="container mt-4">
        <h3 class="mt-3" style="color: #424874; margin-bottom:70px">Create User Address</h3>
        <form id="addressForm" method="POST" action="/addAddress" class="border-0 p-3">
            <div class="row mb-50">
                <div class="form-group col-md-4">
                    <label for="addressType">Address Type:</label>
                    <input type="text" class="form-control border-3" id="addressType" name="addressType">
                </div>
                <div class="form-group col-md-4">
                    <label for="name">Name:</label>
                    <input type="text" class="form-control border-3" id="name" name="name">
                </div>
                <div class="form-group col-md-4">
                    <label for="city">City:</label>
                    <input type="text" class="form-control border-3" id="city" name="city">
                </div>
            </div>
            <div class="row mb-3">
                <div class="form-group col-md-4">
                    <label for="landMark">Landmark:</label>
                    <input type="text" class="form-control border-3" id="landMark" name="landMark">
                </div>
                <div class="form-group col-md-4">
                    <label for="state">State:</label>
                    <input type="text" class="form-control border-3" id="state" name="state">
                </div>
                <div class="form-group col-md-4">
                    <label for="pincode">Pincode:</label>
                    <input type="number" class="form-control border-3" id="pincode" name="pincode">
                </div>
            </div>
            <div class="row mb-3">
                <div class="form-group col-md-4">
                    <label for="phone">Phone:</label>
                    <input type="number" class="form-control border-3" id="phone" name="phone">
                </div>
                <div class="form-group col-md-4">
                    <label for="altPhone">Alternate Phone:</label>
                    <input type="number" class="form-control border-3" id="altPhone" name="altPhone">
                </div>
            </div>
            <button type="button" id="submitButton" class="btn btn-primary" onclick="addAddress()">Submit</button>
        </form>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        async function addAddress() {
            const addressData = {
                addressType: document.getElementById("addressType").value,
                name: document.getElementById("name").value,
                city: document.getElementById("city").value,
                landMark: document.getElementById("landMark").value,
                state: document.getElementById("state").value,
                pincode: document.getElementById("pincode").value,
                phone: document.getElementById("phone").value,
                altPhone: document.getElementById("altPhone").value,
            };
            try {
                const response = await fetch("/addAddress", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(addressData),
                });
                const data = await response.json();

                if (data.success) {
                    await Swal.fire({
                        icon: "success",
                        title: "Address Added!",
                        text: "Your address has been successfully added.",
                        showConfirmButton: false,
                        timer: 1500,
                    });
                    window.location.href = "/userProfile";
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Oops!",
                        text: data.message,
                        footer: "Error occurred while adding address",
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: "error",
                    title: "Error!",
                    text: "An unexpected error occurred",
                });
                console.error("Error:", error);
            }
        }

        document.getElementById("submitButton").onclick = function () {
            if (validateForm()) {
                addAddress();
            }
        };

        function validateForm() {
            let isValid = true;
            const requiredFields = ["addressType", "name", "city", "landMark", "state", "pincode", "phone", "altPhone"];
            requiredFields.forEach(function (field) {
                const input = document.getElementById(field);
                const inputValue = input.value.trim();
                const errorElement = document.getElementById(field + "-error");

                if (inputValue === "") {
                    if (!errorElement) {
                        const errorMessage = "This field is required.";
                        const errorDiv = document.createElement("div");
                        errorDiv.className = "text-danger";
                        errorDiv.textContent = errorMessage;
                        errorDiv.id = field + "-error";
                        input.parentNode.appendChild(errorDiv);
                    }
                    isValid = false;
                } else {
                    if (errorElement) {
                        errorElement.remove();
                    }
                }
            });

            const name = document.getElementById("name").value;
            const city = document.getElementById("city").value;
            const landMark = document.getElementById("landMark").value;
            const state = document.getElementById("state").value;
            const pincode = document.getElementById("pincode").value;
            const phone = document.getElementById("phone").value;
            const altPhone = document.getElementById("altPhone").value;

            const namePattern = /^[A-Za-z\s]+$/;
            const pincodePattern = /^\d{6}$/;
            const phonePattern = /^\d{10}$/;

            if (name && !namePattern.test(name)) {
                Swal.fire({
                    title: "Error",
                    text: "Name should contain alphabets only.",
                    icon: "error",
                });
                isValid = false;
            }

            if (city && !namePattern.test(city)) {
                Swal.fire({
                    title: "Error",
                    text: "City should contain alphabets only.",
                    icon: "error",
                });
                isValid = false;
            }

            if (landMark && !namePattern.test(landMark)) {
                Swal.fire({
                    title: "Error",
                    text: "Landmark should contain alphabets only.",
                    icon: "error",
                });
                isValid = false;
            }

            if (state && !namePattern.test(state)) {
                Swal.fire({
                    title: "Error",
                    text: "State should contain alphabets only.",
                    icon: "error",
                });
                isValid = false;
            }

            if (pincode && !pincodePattern.test(pincode)) {
                Swal.fire({
                    title: "Error",
                    text: "Pincode should be a 6-digit number.",
                    icon: "error",
                });
                isValid = false;
            }

            if (phone && !phonePattern.test(phone)) {
                Swal.fire({
                    title: "Error",
                    text: "Phone number should be a 10-digit number.",
                    icon: "error",
                });
                isValid = false;
            }

            if (altPhone && altPhone !== "" && !phonePattern.test(altPhone)) {
                Swal.fire({
                    title: "Error",
                    text: "Alternate phone number should be a 10-digit number.",
                    icon: "error",
                });
                isValid = false;
            }

            if (phone && altPhone && phone === altPhone) {
                Swal.fire({
                    title: "Error",
                    text: "Phone number and alternate phone number should be different.",
                    icon: "error",
                });
                isValid = false;
            }

            return isValid;

        }

    </script>
    <%- include("../../views/partials/user/footer") %>